/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don\'t waste too much time looking for it. Contact support-api@ezmax.ca, we\'re here to help. We are developpers so we know programmers don\'t like bad documentation. If you don\'t find what you need in the documentation, let us know, we\'ll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.8
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WebhookEzsignDocumentCompleted,
    WebhookEzsignDocumentCompletedFromJSON,
    WebhookEzsignDocumentCompletedToJSON,
    WebhookEzsignFolderCompleted,
    WebhookEzsignFolderCompletedFromJSON,
    WebhookEzsignFolderCompletedToJSON,
} from '../models';

export interface WebhookEzsignDocumentCompletedRequest {
    webhookPathEzsignDocumentCompleted: string;
    webhookEzsignDocumentCompleted: WebhookEzsignDocumentCompleted;
}

export interface WebhookEzsignFolderCompletedRequest {
    webhookPathEzsignFolderCompleted: string;
    webhookEzsignFolderCompleted: WebhookEzsignFolderCompleted;
}

/**
 * 
 */
export class EzsignWebhookApi extends runtime.BaseAPI {

    /**
     * This Webhook will be called when the last signature on an Ezsigndocument is made.
     * DocumentCompleted
     */
    async webhookEzsignDocumentCompletedRaw(requestParameters: WebhookEzsignDocumentCompletedRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookPathEzsignDocumentCompleted === null || requestParameters.webhookPathEzsignDocumentCompleted === undefined) {
            throw new runtime.RequiredError('webhookPathEzsignDocumentCompleted','Required parameter requestParameters.webhookPathEzsignDocumentCompleted was null or undefined when calling webhookEzsignDocumentCompleted.');
        }

        if (requestParameters.webhookEzsignDocumentCompleted === null || requestParameters.webhookEzsignDocumentCompleted === undefined) {
            throw new runtime.RequiredError('webhookEzsignDocumentCompleted','Required parameter requestParameters.webhookEzsignDocumentCompleted was null or undefined when calling webhookEzsignDocumentCompleted.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/{WebhookPathEzsignDocumentCompleted}`.replace(`{${"WebhookPathEzsignDocumentCompleted"}}`, encodeURIComponent(String(requestParameters.webhookPathEzsignDocumentCompleted))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookEzsignDocumentCompletedToJSON(requestParameters.webhookEzsignDocumentCompleted),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This Webhook will be called when the last signature on an Ezsigndocument is made.
     * DocumentCompleted
     */
    async webhookEzsignDocumentCompleted(requestParameters: WebhookEzsignDocumentCompletedRequest): Promise<void> {
        await this.webhookEzsignDocumentCompletedRaw(requestParameters);
    }

    /**
     * This Webhook will be called when the last signature on the last Ezsigndocument from the folder is made.
     * FolderCompleted
     */
    async webhookEzsignFolderCompletedRaw(requestParameters: WebhookEzsignFolderCompletedRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookPathEzsignFolderCompleted === null || requestParameters.webhookPathEzsignFolderCompleted === undefined) {
            throw new runtime.RequiredError('webhookPathEzsignFolderCompleted','Required parameter requestParameters.webhookPathEzsignFolderCompleted was null or undefined when calling webhookEzsignFolderCompleted.');
        }

        if (requestParameters.webhookEzsignFolderCompleted === null || requestParameters.webhookEzsignFolderCompleted === undefined) {
            throw new runtime.RequiredError('webhookEzsignFolderCompleted','Required parameter requestParameters.webhookEzsignFolderCompleted was null or undefined when calling webhookEzsignFolderCompleted.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/{WebhookPathEzsignFolderCompleted}`.replace(`{${"WebhookPathEzsignFolderCompleted"}}`, encodeURIComponent(String(requestParameters.webhookPathEzsignFolderCompleted))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookEzsignFolderCompletedToJSON(requestParameters.webhookEzsignFolderCompleted),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This Webhook will be called when the last signature on the last Ezsigndocument from the folder is made.
     * FolderCompleted
     */
    async webhookEzsignFolderCompleted(requestParameters: WebhookEzsignFolderCompletedRequest): Promise<void> {
        await this.webhookEzsignFolderCompletedRaw(requestParameters);
    }

}
