/* tslint:disable */
/* eslint-disable */
/**
 * eZmax API Definition
 * This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don\'t waste too much time looking for it. Contact support-api@ezmax.ca, we\'re here to help. We are developpers so we know programmers don\'t like bad documentation. If you don\'t find what you need in the documentation, let us know, we\'ll improve it and put you rapidly up on track.
 *
 * The version of the OpenAPI document: 1.0.27
 * Contact: support-api@ezmax.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CommonResponseError,
    CommonResponseErrorFromJSON,
    CommonResponseErrorToJSON,
    EzsignfolderCreateObjectV1Request,
    EzsignfolderCreateObjectV1RequestFromJSON,
    EzsignfolderCreateObjectV1RequestToJSON,
    EzsignfolderCreateObjectV1Response,
    EzsignfolderCreateObjectV1ResponseFromJSON,
    EzsignfolderCreateObjectV1ResponseToJSON,
    EzsignfolderDeleteObjectV1Response,
    EzsignfolderDeleteObjectV1ResponseFromJSON,
    EzsignfolderDeleteObjectV1ResponseToJSON,
    EzsignfolderEditObjectV1Request,
    EzsignfolderEditObjectV1RequestFromJSON,
    EzsignfolderEditObjectV1RequestToJSON,
    EzsignfolderEditObjectV1Response,
    EzsignfolderEditObjectV1ResponseFromJSON,
    EzsignfolderEditObjectV1ResponseToJSON,
    EzsignfolderGetObjectV1Response,
    EzsignfolderGetObjectV1ResponseFromJSON,
    EzsignfolderGetObjectV1ResponseToJSON,
    EzsignfolderSendV1Request,
    EzsignfolderSendV1RequestFromJSON,
    EzsignfolderSendV1RequestToJSON,
    EzsignfolderSendV1Response,
    EzsignfolderSendV1ResponseFromJSON,
    EzsignfolderSendV1ResponseToJSON,
} from '../models';

export interface EzsignfolderCreateObjectV1OperationRequest {
    ezsignfolderCreateObjectV1Request: Array<EzsignfolderCreateObjectV1Request>;
}

export interface EzsignfolderDeleteObjectV1Request {
    pkiEzsignfolderID: number;
}

export interface EzsignfolderEditObjectV1OperationRequest {
    pkiEzsignfolderID: number;
    ezsignfolderEditObjectV1Request: EzsignfolderEditObjectV1Request;
}

export interface EzsignfolderGetObjectGetChildrenV1Request {
    pkiEzsignfolderID: number;
}

export interface EzsignfolderGetObjectV1Request {
    pkiEzsignfolderID: number;
}

export interface EzsignfolderSendV1OperationRequest {
    pkiEzsignfolderID: number;
    ezsignfolderSendV1Request: EzsignfolderSendV1Request;
}

/**
 * 
 */
export class ObjectEzsignfolderApi extends runtime.BaseAPI {

    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * Create a new Ezsignfolder
     */
    async ezsignfolderCreateObjectV1Raw(requestParameters: EzsignfolderCreateObjectV1OperationRequest): Promise<runtime.ApiResponse<EzsignfolderCreateObjectV1Response>> {
        if (requestParameters.ezsignfolderCreateObjectV1Request === null || requestParameters.ezsignfolderCreateObjectV1Request === undefined) {
            throw new runtime.RequiredError('ezsignfolderCreateObjectV1Request','Required parameter requestParameters.ezsignfolderCreateObjectV1Request was null or undefined when calling ezsignfolderCreateObjectV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.ezsignfolderCreateObjectV1Request.map(EzsignfolderCreateObjectV1RequestToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EzsignfolderCreateObjectV1ResponseFromJSON(jsonValue));
    }

    /**
     * The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
     * Create a new Ezsignfolder
     */
    async ezsignfolderCreateObjectV1(requestParameters: EzsignfolderCreateObjectV1OperationRequest): Promise<EzsignfolderCreateObjectV1Response> {
        const response = await this.ezsignfolderCreateObjectV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an existing Ezsignfolder
     */
    async ezsignfolderDeleteObjectV1Raw(requestParameters: EzsignfolderDeleteObjectV1Request): Promise<runtime.ApiResponse<EzsignfolderDeleteObjectV1Response>> {
        if (requestParameters.pkiEzsignfolderID === null || requestParameters.pkiEzsignfolderID === undefined) {
            throw new runtime.RequiredError('pkiEzsignfolderID','Required parameter requestParameters.pkiEzsignfolderID was null or undefined when calling ezsignfolderDeleteObjectV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder/{pkiEzsignfolderID}`.replace(`{${"pkiEzsignfolderID"}}`, encodeURIComponent(String(requestParameters.pkiEzsignfolderID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EzsignfolderDeleteObjectV1ResponseFromJSON(jsonValue));
    }

    /**
     * Delete an existing Ezsignfolder
     */
    async ezsignfolderDeleteObjectV1(requestParameters: EzsignfolderDeleteObjectV1Request): Promise<EzsignfolderDeleteObjectV1Response> {
        const response = await this.ezsignfolderDeleteObjectV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Modify an existing Ezsignfolder
     */
    async ezsignfolderEditObjectV1Raw(requestParameters: EzsignfolderEditObjectV1OperationRequest): Promise<runtime.ApiResponse<EzsignfolderEditObjectV1Response>> {
        if (requestParameters.pkiEzsignfolderID === null || requestParameters.pkiEzsignfolderID === undefined) {
            throw new runtime.RequiredError('pkiEzsignfolderID','Required parameter requestParameters.pkiEzsignfolderID was null or undefined when calling ezsignfolderEditObjectV1.');
        }

        if (requestParameters.ezsignfolderEditObjectV1Request === null || requestParameters.ezsignfolderEditObjectV1Request === undefined) {
            throw new runtime.RequiredError('ezsignfolderEditObjectV1Request','Required parameter requestParameters.ezsignfolderEditObjectV1Request was null or undefined when calling ezsignfolderEditObjectV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder/{pkiEzsignfolderID}`.replace(`{${"pkiEzsignfolderID"}}`, encodeURIComponent(String(requestParameters.pkiEzsignfolderID))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EzsignfolderEditObjectV1RequestToJSON(requestParameters.ezsignfolderEditObjectV1Request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EzsignfolderEditObjectV1ResponseFromJSON(jsonValue));
    }

    /**
     * Modify an existing Ezsignfolder
     */
    async ezsignfolderEditObjectV1(requestParameters: EzsignfolderEditObjectV1OperationRequest): Promise<EzsignfolderEditObjectV1Response> {
        const response = await this.ezsignfolderEditObjectV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve an existing Ezsignfolder\'s children IDs
     */
    async ezsignfolderGetObjectGetChildrenV1Raw(requestParameters: EzsignfolderGetObjectGetChildrenV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pkiEzsignfolderID === null || requestParameters.pkiEzsignfolderID === undefined) {
            throw new runtime.RequiredError('pkiEzsignfolderID','Required parameter requestParameters.pkiEzsignfolderID was null or undefined when calling ezsignfolderGetObjectGetChildrenV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder/{pkiEzsignfolderID}/getChildren`.replace(`{${"pkiEzsignfolderID"}}`, encodeURIComponent(String(requestParameters.pkiEzsignfolderID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Retrieve an existing Ezsignfolder\'s children IDs
     */
    async ezsignfolderGetObjectGetChildrenV1(requestParameters: EzsignfolderGetObjectGetChildrenV1Request): Promise<void> {
        await this.ezsignfolderGetObjectGetChildrenV1Raw(requestParameters);
    }

    /**
     * Retrieve an existing Ezsignfolder
     */
    async ezsignfolderGetObjectV1Raw(requestParameters: EzsignfolderGetObjectV1Request): Promise<runtime.ApiResponse<EzsignfolderGetObjectV1Response>> {
        if (requestParameters.pkiEzsignfolderID === null || requestParameters.pkiEzsignfolderID === undefined) {
            throw new runtime.RequiredError('pkiEzsignfolderID','Required parameter requestParameters.pkiEzsignfolderID was null or undefined when calling ezsignfolderGetObjectV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder/{pkiEzsignfolderID}`.replace(`{${"pkiEzsignfolderID"}}`, encodeURIComponent(String(requestParameters.pkiEzsignfolderID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EzsignfolderGetObjectV1ResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve an existing Ezsignfolder
     */
    async ezsignfolderGetObjectV1(requestParameters: EzsignfolderGetObjectV1Request): Promise<EzsignfolderGetObjectV1Response> {
        const response = await this.ezsignfolderGetObjectV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Send the Ezsignfolder to the signatories for signature
     */
    async ezsignfolderSendV1Raw(requestParameters: EzsignfolderSendV1OperationRequest): Promise<runtime.ApiResponse<EzsignfolderSendV1Response>> {
        if (requestParameters.pkiEzsignfolderID === null || requestParameters.pkiEzsignfolderID === undefined) {
            throw new runtime.RequiredError('pkiEzsignfolderID','Required parameter requestParameters.pkiEzsignfolderID was null or undefined when calling ezsignfolderSendV1.');
        }

        if (requestParameters.ezsignfolderSendV1Request === null || requestParameters.ezsignfolderSendV1Request === undefined) {
            throw new runtime.RequiredError('ezsignfolderSendV1Request','Required parameter requestParameters.ezsignfolderSendV1Request was null or undefined when calling ezsignfolderSendV1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Authorization authentication
        }

        const response = await this.request({
            path: `/1/object/ezsignfolder/{pkiEzsignfolderID}/send`.replace(`{${"pkiEzsignfolderID"}}`, encodeURIComponent(String(requestParameters.pkiEzsignfolderID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EzsignfolderSendV1RequestToJSON(requestParameters.ezsignfolderSendV1Request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EzsignfolderSendV1ResponseFromJSON(jsonValue));
    }

    /**
     * Send the Ezsignfolder to the signatories for signature
     */
    async ezsignfolderSendV1(requestParameters: EzsignfolderSendV1OperationRequest): Promise<EzsignfolderSendV1Response> {
        const response = await this.ezsignfolderSendV1Raw(requestParameters);
        return await response.value();
    }

}
